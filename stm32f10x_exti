#include "stm32f10x.h"
 
GPIO_InitTypeDef GPIO_InitStruct;

//嵌入式向量中断控制器配置函数
void NVIC_Config(){
	NVIC_InitTypeDef NVIC_InitStruct;//NVIC配置结构体
	//配置抢占优先级和子优先级的位数分配，NVIC_PriorityGroup_1表示抢占优先级占1位，子优先级占3位
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
	
	//接下来设置NVIC配置结构体
	NVIC_InitStruct.NVIC_IRQChannel = EXTI0_IRQn;//配置中断通道
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 1; //配置抢占优先级，注意中断优先级数字越小，优先级越高
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0; //配置子优先级
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;//使能中断通道
	NVIC_Init(&NVIC_InitStruct); //使用配置结构体完成初始化，即寄存器的配置	
}

void EXTI_Config(){
	GPIO_InitTypeDef GPIO_InitStruct;//GPIO配置结构体
	EXTI_InitTypeDef EXTI_InitStruct;//EXTI配置结构体
	
	NVIC_Config();//调用NVIC配置函数，完成NVIC配置
	
	//初始化GPIOA
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);//使能GPIOA时钟
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPD;
	GPIO_Init(GPIOA, &GPIO_InitStruct);
	
	//初始化EXTI外设
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);//配置IO复用时钟
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);//配置GPIO与EXTI连接的引脚
	EXTI_InitStruct.EXTI_Line = EXTI_Line0;//配置中断线/事件线
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;//使能中断线
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;//配置为中断，而非事件
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;//配置为上升沿触发
	EXTI_Init(&EXTI_InitStruct);
}

void delay(){
	int i = 5000000;
	while(i--);
}

int main(){
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_13;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOC, &GPIO_InitStruct);

	EXTI_Config();
	
	while(1){
	
	}
}


/*
中断响应程序

extern void delay();

void EXTI0_IRQHandler(){
	if(EXTI_GetITStatus(EXTI_Line0) != RESET){
		GPIO_ResetBits(GPIOC, GPIO_Pin_13);
		delay();
		GPIO_SetBits(GPIOC, GPIO_Pin_13);
		delay();
		GPIO_ResetBits(GPIOC, GPIO_Pin_13);
		delay();
		GPIO_SetBits(GPIOC, GPIO_Pin_13);
		delay();
		GPIO_ResetBits(GPIOC, GPIO_Pin_13);
		delay();
		GPIO_SetBits(GPIOC, GPIO_Pin_13);
		delay();
	}
	EXTI_ClearITPendingBit(EXTI_Line0);
}
*/
